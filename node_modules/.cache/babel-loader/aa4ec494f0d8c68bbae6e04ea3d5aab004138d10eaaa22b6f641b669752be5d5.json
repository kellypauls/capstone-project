{"ast":null,"code":"import { parseFilterArgs, functionalUpdate, parseQueryArgs, noop, hashQueryKey, partialMatchKey, hashQueryKeyByOptions } from './utils.mjs';\nimport { QueryCache } from './queryCache.mjs';\nimport { MutationCache } from './mutationCache.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior.mjs';\nimport { defaultLogger } from './logger.mjs';\n\n// CLASS\nclass QueryClient {\n  constructor(config = {}) {\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n  }\n  mount() {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.queryCache.onFocus();\n      }\n    });\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.queryCache.onOnline();\n      }\n    });\n  }\n  unmount() {\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n  }\n  isFetching(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    filters.fetchStatus = 'fetching';\n    return this.queryCache.findAll(filters).length;\n  }\n  isMutating(filters) {\n    return this.mutationCache.findAll({\n      ...filters,\n      fetching: true\n    }).length;\n  }\n  getQueryData(queryKey, filters) {\n    var _this$queryCache$find;\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n  }\n  getQueriesData(queryKeyOrFilters) {\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey,\n      state\n    }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n  setQueryData(queryKey, updater, options) {\n    const query = this.queryCache.find(queryKey);\n    const prevData = query == null ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n    if (typeof data === 'undefined') {\n      return undefined;\n    }\n    const parsedOptions = parseQueryArgs(queryKey);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n    return this.queryCache.build(this, defaultedOptions).setData(data, {\n      ...options,\n      manual: true\n    });\n  }\n  setQueriesData(queryKeyOrFilters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\n  }\n  getQueryState(queryKey, filters) {\n    var _this$queryCache$find2;\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n  }\n  removeQueries(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    const queryCache = this.queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n  resetQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const queryCache = this.queryCache;\n    const refetchFilters = {\n      type: 'active',\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  cancelQueries(arg1, arg2, arg3) {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true;\n    }\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n  invalidateQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    return notifyManager.batch(() => {\n      var _ref, _filters$refetchType;\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n      if (filters.refetchType === 'none') {\n        return Promise.resolve();\n      }\n      const refetchFilters = {\n        ...filters,\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  refetchQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      var _options$cancelRefetc;\n      return query.fetch(undefined, {\n        ...options,\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n        meta: {\n          refetchPage: filters.refetchPage\n        }\n      });\n    }));\n    let promise = Promise.all(promises).then(noop);\n    if (!(options != null && options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  fetchQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false;\n    }\n    const query = this.queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n  prefetchQuery(arg1, arg2, arg3) {\n    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n  fetchInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    parsedOptions.behavior = infiniteQueryBehavior();\n    return this.fetchQuery(parsedOptions);\n  }\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n  resumePausedMutations() {\n    return this.mutationCache.resumePausedMutations();\n  }\n  getQueryCache() {\n    return this.queryCache;\n  }\n  getMutationCache() {\n    return this.mutationCache;\n  }\n  getLogger() {\n    return this.logger;\n  }\n  getDefaultOptions() {\n    return this.defaultOptions;\n  }\n  setDefaultOptions(options) {\n    this.defaultOptions = options;\n  }\n  setQueryDefaults(queryKey, options) {\n    const result = this.queryDefaults.find(x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey));\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.queryDefaults.push({\n        queryKey,\n        defaultOptions: options\n      });\n    }\n  }\n  getQueryDefaults(queryKey) {\n    if (!queryKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n    const firstMatchingDefaults = this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x => partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n      }\n    }\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n  setMutationDefaults(mutationKey, options) {\n    const result = this.mutationDefaults.find(x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey));\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.mutationDefaults.push({\n        mutationKey,\n        defaultOptions: options\n      });\n    }\n  }\n  getMutationDefaults(mutationKey) {\n    if (!mutationKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n    const firstMatchingDefaults = this.mutationDefaults.find(x => partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x => partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n      }\n    }\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n  defaultQueryOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    } // dependent default values\n\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n    }\n    return defaultedOptions;\n  }\n  defaultMutationOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n  clear() {\n    this.queryCache.clear();\n    this.mutationCache.clear();\n  }\n}\nexport { QueryClient };","map":{"version":3,"names":["QueryClient","constructor","config","queryCache","QueryCache","mutationCache","MutationCache","logger","defaultLogger","defaultOptions","queryDefaults","mutationDefaults","mount","unsubscribeFocus","focusManager","subscribe","isFocused","resumePausedMutations","onFocus","unsubscribeOnline","onlineManager","isOnline","onOnline","unmount","_this$unsubscribeFocu","_this$unsubscribeOnli","call","isFetching","arg1","arg2","filters","parseFilterArgs","fetchStatus","findAll","length","isMutating","fetching","getQueryData","queryKey","_this$queryCache$find","find","state","data","getQueriesData","queryKeyOrFilters","getQueryCache","map","setQueryData","updater","options","query","prevData","functionalUpdate","undefined","parsedOptions","parseQueryArgs","defaultedOptions","defaultQueryOptions","build","setData","manual","setQueriesData","notifyManager","batch","getQueryState","_this$queryCache$find2","removeQueries","forEach","remove","resetQueries","arg3","refetchFilters","type","reset","refetchQueries","cancelQueries","cancelOptions","revert","promises","cancel","Promise","all","then","noop","catch","invalidateQueries","_ref","_filters$refetchType","invalidate","refetchType","resolve","filter","isDisabled","_options$cancelRefetc","fetch","cancelRefetch","meta","refetchPage","promise","throwOnError","fetchQuery","retry","isStaleByTime","staleTime","prefetchQuery","fetchInfiniteQuery","behavior","infiniteQueryBehavior","prefetchInfiniteQuery","getMutationCache","getLogger","getDefaultOptions","setDefaultOptions","setQueryDefaults","result","x","hashQueryKey","push","getQueryDefaults","firstMatchingDefaults","partialMatchKey","process","env","NODE_ENV","matchingDefaults","error","JSON","stringify","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","queryHash","hashQueryKeyByOptions","refetchOnReconnect","networkMode","useErrorBoundary","suspense","defaultMutationOptions","mutations","clear"],"sources":["/Users/kellypauls/Desktop/capstone-project/node_modules/@tanstack/query-core/src/queryClient.ts"],"sourcesContent":["import type { QueryFilters, Updater, MutationFilters } from './utils'\nimport {\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  functionalUpdate,\n} from './utils'\nimport type {\n  QueryClientConfig,\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type { CancelOptions, DefaultedQueryObserverOptions } from './types'\nimport type { Logger } from './logger'\nimport { defaultLogger } from './logger'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private logger: Logger\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.logger = config.logger || defaultLogger\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetchStatus = 'fetching'\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TQueryFnData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): TQueryFnData | undefined {\n    return this.queryCache.find<TQueryFnData>(queryKey, filters)?.state.data\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    queryKey: QueryKey,\n  ): [QueryKey, TQueryFnData | undefined][]\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): [QueryKey, TQueryFnData | undefined][]\n  getQueriesData<TQueryFnData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n  ): [QueryKey, TQueryFnData | undefined][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TQueryFnData | undefined\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TQueryFnData>(\n    queryKey: QueryKey,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): TQueryFnData | undefined {\n    const query = this.queryCache.find<TQueryFnData>(queryKey)\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    queryKey: QueryKey,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][]\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][]\n\n  setQueriesData<TQueryFnData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TQueryFnData | undefined][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<TQueryFnData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): QueryState<TQueryFnData, TError> | undefined {\n    return this.queryCache.find<TQueryFnData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions,\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions,\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(cancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) =>\n          query.fetch(undefined, {\n            ...options,\n            cancelRefetch: options?.cancelRefetch ?? true,\n            meta: { refetchPage: filters.refetchPage },\n          }),\n        ),\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getLogger(): Logger {\n    return this.logger\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<unknown, any, any, any>,\n  ): void {\n    const result = this.queryDefaults.find(\n      (x) => hashQueryKey(queryKey) === hashQueryKey(x.queryKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey,\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    if (!queryKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.queryDefaults.find((x) =>\n      partialMatchKey(queryKey, x.queryKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter((x) =>\n        partialMatchKey(queryKey, x.queryKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\n          `[QueryClient] Several query defaults match with key '${JSON.stringify(\n            queryKey,\n          )}'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.`,\n        )\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>,\n  ): void {\n    const result = this.mutationDefaults.find(\n      (x) => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    if (!mutationKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.mutationDefaults.find((x) =>\n      partialMatchKey(mutationKey, x.mutationKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter((x) =>\n        partialMatchKey(mutationKey, x.mutationKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\n          `[QueryClient] Several mutation defaults match with key '${JSON.stringify(\n            mutationKey,\n          )}'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.`,\n        )\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey,\n  >(\n    options?:\n      | QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n"],"mappings":";;;;;;;;;AAsDA;AAEO,MAAMA,WAAN,CAAkB;EAUvBC,WAAWA,CAACC,MAAyB,GAAG,EAA7B,EAAiC;IAC1C,IAAK,CAAAC,UAAL,GAAkBD,MAAM,CAACC,UAAP,IAAqB,IAAIC,UAAJ,EAAvC;IACA,IAAK,CAAAC,aAAL,GAAqBH,MAAM,CAACG,aAAP,IAAwB,IAAIC,aAAJ,EAA7C;IACA,KAAKC,MAAL,GAAcL,MAAM,CAACK,MAAP,IAAiBC,aAA/B;IACA,KAAKC,cAAL,GAAsBP,MAAM,CAACO,cAAP,IAAyB,EAA/C;IACA,IAAK,CAAAC,aAAL,GAAqB,EAArB;IACA,IAAK,CAAAC,gBAAL,GAAwB,EAAxB;EACD;EAEDC,KAAKA,CAAA,EAAS;IACZ,KAAKC,gBAAL,GAAwBC,YAAY,CAACC,SAAb,CAAuB,MAAM;MACnD,IAAID,YAAY,CAACE,SAAb,EAAJ,EAA8B;QAC5B,KAAKC,qBAAL;QACA,IAAK,CAAAd,UAAL,CAAgBe,OAAhB;MACD;IACF,CALuB,CAAxB;IAMA,KAAKC,iBAAL,GAAyBC,aAAa,CAACL,SAAd,CAAwB,MAAM;MACrD,IAAIK,aAAa,CAACC,QAAd,EAAJ,EAA8B;QAC5B,KAAKJ,qBAAL;QACA,IAAK,CAAAd,UAAL,CAAgBmB,QAAhB;MACD;IACF,CALwB,CAAzB;EAMD;EAEDC,OAAOA,CAAA,EAAS;IAAA,IAAAC,qBAAA,EAAAC,qBAAA;IACd,CAAAD,qBAAA,QAAKX,gBAAL,qBAAAW,qBAAA,CAAAE,IAAA;IACA,CAAAD,qBAAA,QAAKN,iBAAL,qBAAAM,qBAAA,CAAAC,IAAA;EACD;EAIDC,UAAUA,CAACC,IAAD,EAAiCC,IAAjC,EAA8D;IACtE,MAAM,CAACC,OAAD,CAAY,GAAAC,eAAe,CAACH,IAAD,EAAOC,IAAP,CAAjC;IACAC,OAAO,CAACE,WAAR,GAAsB,UAAtB;IACA,OAAO,KAAK7B,UAAL,CAAgB8B,OAAhB,CAAwBH,OAAxB,EAAiCI,MAAxC;EACD;EAEDC,UAAUA,CAACL,OAAD,EAAoC;IAC5C,OAAO,KAAKzB,aAAL,CAAmB4B,OAAnB,CAA2B;MAAE,GAAGH,OAAL;MAAcM,QAAQ,EAAE;IAAxB,CAA3B,EAA2DF,MAAlE;EACD;EAEDG,YAAYA,CACVC,QADU,EAEVR,OAFU,EAGgB;IAAA,IAAAS,qBAAA;IAC1B,QAAAA,qBAAA,GAAO,IAAK,CAAApC,UAAL,CAAgBqC,IAAhB,CAAmCF,QAAnC,EAA6CR,OAA7C,CAAP,qBAAOS,qBAAuD,CAAAE,KAAvD,CAA6DC,IAApE;EACD;EAQDC,cAAcA,CACZC,iBADY,EAE4B;IACxC,OAAO,KAAKC,aAAL,EACJ,CAAAZ,OADI,CACIW,iBADJ,EAEJE,GAFI,CAEA,CAAC;MAAER,QAAF;MAAYG;IAAZ,CAAD,KAAyB;MAC5B,MAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;MACA,OAAO,CAACJ,QAAD,EAAWI,IAAX,CAAP;IACD,CALI,CAAP;EAMD;EAEDK,YAAYA,CACVT,QADU,EAEVU,OAFU,EAGVC,OAHU,EAIgB;IAC1B,MAAMC,KAAK,GAAG,IAAK,CAAA/C,UAAL,CAAgBqC,IAAhB,CAAmCF,QAAnC,CAAd;IACA,MAAMa,QAAQ,GAAGD,KAAH,oBAAGA,KAAK,CAAET,KAAP,CAAaC,IAA9B;IACA,MAAMA,IAAI,GAAGU,gBAAgB,CAACJ,OAAD,EAAUG,QAAV,CAA7B;IAEA,IAAI,OAAOT,IAAP,KAAgB,WAApB,EAAiC;MAC/B,OAAOW,SAAP;IACD;IAED,MAAMC,aAAa,GAAGC,cAAc,CAACjB,QAAD,CAApC;IACA,MAAMkB,gBAAgB,GAAG,KAAKC,mBAAL,CAAyBH,aAAzB,CAAzB;IACA,OAAO,IAAK,CAAAnD,UAAL,CACJuD,KADI,CACE,IADF,EACQF,gBADR,EAEJG,OAFI,CAEIjB,IAFJ,EAEU;MAAE,GAAGO,OAAL;MAAcW,MAAM,EAAE;IAAtB,CAFV,CAAP;EAGD;EAcDC,cAAcA,CACZjB,iBADY,EAEZI,OAFY,EAGZC,OAHY,EAI4B;IACxC,OAAOa,aAAa,CAACC,KAAd,CAAoB,MACzB,IAAK,CAAAlB,aAAL,EACG,CAAAZ,OADH,CACWW,iBADX,CAEG,CAAAE,GAFH,CAEO,CAAC;MAAER;IAAF,CAAD,KAAkB,CACrBA,QADqB,EAErB,KAAKS,YAAL,CAAgCT,QAAhC,EAA0CU,OAA1C,EAAmDC,OAAnD,CAFqB,CAFzB,CADK,CAAP;EAQD;EAEDe,aAAaA,CACX1B,QADW,EAEXR,OAFW,EAGmC;IAAA,IAAAmC,sBAAA;IAC9C,OAAO,CAAAA,sBAAA,QAAK9D,UAAL,CAAgBqC,IAAhB,CAA2CF,QAA3C,EAAqDR,OAArD,CAAP,KAAO,gBAAAmC,sBAAA,CAA+DxB,KAAtE;EACD;EAIDyB,aAAaA,CAACtC,IAAD,EAAiCC,IAAjC,EAA4D;IACvE,MAAM,CAACC,OAAD,CAAY,GAAAC,eAAe,CAACH,IAAD,EAAOC,IAAP,CAAjC;IACA,MAAM1B,UAAU,GAAG,KAAKA,UAAxB;IACA2D,aAAa,CAACC,KAAd,CAAoB,MAAM;MACxB5D,UAAU,CAAC8B,OAAX,CAAmBH,OAAnB,EAA4BqC,OAA5B,CAAqCjB,KAAD,IAAW;QAC7C/C,UAAU,CAACiE,MAAX,CAAkBlB,KAAlB;OADF;KADF;EAKD;EAWDmB,YAAYA,CACVzC,IADU,EAEVC,IAFU,EAGVyC,IAHU,EAIK;IACf,MAAM,CAACxC,OAAD,EAAUmB,OAAV,CAAqB,GAAAlB,eAAe,CAACH,IAAD,EAAOC,IAAP,EAAayC,IAAb,CAA1C;IACA,MAAMnE,UAAU,GAAG,KAAKA,UAAxB;IAEA,MAAMoE,cAAmC,GAAG;MAC1CC,IAAI,EAAE,QADoC;MAE1C,GAAG1C;KAFL;IAKA,OAAOgC,aAAa,CAACC,KAAd,CAAoB,MAAM;MAC/B5D,UAAU,CAAC8B,OAAX,CAAmBH,OAAnB,EAA4BqC,OAA5B,CAAqCjB,KAAD,IAAW;QAC7CA,KAAK,CAACuB,KAAN;OADF;MAGA,OAAO,KAAKC,cAAL,CAAoBH,cAApB,EAAoCtB,OAApC,CAAP;IACD,CALM,CAAP;EAMD;EAQD0B,aAAaA,CACX/C,IADW,EAEXC,IAFW,EAGXyC,IAHW,EAII;IACf,MAAM,CAACxC,OAAD,EAAU8C,aAAa,GAAG,EAA1B,IAAgC7C,eAAe,CAACH,IAAD,EAAOC,IAAP,EAAayC,IAAb,CAArD;IAEA,IAAI,OAAOM,aAAa,CAACC,MAArB,KAAgC,WAApC,EAAiD;MAC/CD,aAAa,CAACC,MAAd,GAAuB,IAAvB;IACD;IAED,MAAMC,QAAQ,GAAGhB,aAAa,CAACC,KAAd,CAAoB,MACnC,KAAK5D,UAAL,CACG8B,OADH,CACWH,OADX,CAEG,CAAAgB,GAFH,CAEQI,KAAD,IAAWA,KAAK,CAAC6B,MAAN,CAAaH,aAAb,CAFlB,CADe,CAAjB;IAMA,OAAOI,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAsBI,IAAtB,CAA2BC,IAA3B,EAAiCC,KAAjC,CAAuCD,IAAvC,CAAP;EACD;EAWDE,iBAAiBA,CACfzD,IADe,EAEfC,IAFe,EAGfyC,IAHe,EAIA;IACf,MAAM,CAACxC,OAAD,EAAUmB,OAAV,CAAqB,GAAAlB,eAAe,CAACH,IAAD,EAAOC,IAAP,EAAayC,IAAb,CAA1C;IAEA,OAAOR,aAAa,CAACC,KAAd,CAAoB,MAAM;MAAA,IAAAuB,IAAA,EAAAC,oBAAA;MAC/B,IAAK,CAAApF,UAAL,CAAgB8B,OAAhB,CAAwBH,OAAxB,CAAiC,CAAAqC,OAAjC,CAA0CjB,KAAD,IAAW;QAClDA,KAAK,CAACsC,UAAN;OADF;MAIA,IAAI1D,OAAO,CAAC2D,WAAR,KAAwB,MAA5B,EAAoC;QAClC,OAAOT,OAAO,CAACU,OAAR,EAAP;MACD;MACD,MAAMnB,cAAmC,GAAG;QAC1C,GAAGzC,OADuC;QAE1C0C,IAAI,GAAAc,IAAA,IAAAC,oBAAA,GAAEzD,OAAO,CAAC2D,WAAV,YAAAF,oBAAA,GAAyBzD,OAAO,CAAC0C,IAAjC,KAAyC,OAAAc,IAAA;OAF/C;MAIA,OAAO,KAAKZ,cAAL,CAAoBH,cAApB,EAAoCtB,OAApC,CAAP;IACD,CAbM,CAAP;EAcD;EAWDyB,cAAcA,CACZ9C,IADY,EAEZC,IAFY,EAGZyC,IAHY,EAIG;IACf,MAAM,CAACxC,OAAD,EAAUmB,OAAV,CAAqB,GAAAlB,eAAe,CAACH,IAAD,EAAOC,IAAP,EAAayC,IAAb,CAA1C;IAEA,MAAMQ,QAAQ,GAAGhB,aAAa,CAACC,KAAd,CAAoB,MACnC,IAAK,CAAA5D,UAAL,CACG8B,OADH,CACWH,OADX,EAEG6D,MAFH,CAEWzC,KAAD,IAAW,CAACA,KAAK,CAAC0C,UAAN,EAFtB,EAGG9C,GAHH,CAGQI,KAAD;MAAA,IAAA2C,qBAAA;MAAA,OACH3C,KAAK,CAAC4C,KAAN,CAAYzC,SAAZ,EAAuB;QACrB,GAAGJ,OADkB;QAErB8C,aAAa,GAAAF,qBAAA,GAAE5C,OAAF,oBAAEA,OAAO,CAAE8C,aAAX,YAAAF,qBAAA,GAA4B,IAFpB;QAGrBG,IAAI,EAAE;UAAEC,WAAW,EAAEnE,OAAO,CAACmE;QAAvB;MAHe,CAAvB,CADG;IAAA,CAHP,CADe,CAAjB;IAaA,IAAIC,OAAO,GAAGlB,OAAO,CAACC,GAAR,CAAYH,QAAZ,CAAsB,CAAAI,IAAtB,CAA2BC,IAA3B,CAAd;IAEA,IAAI,EAAClC,OAAD,YAACA,OAAO,CAAEkD,YAAV,CAAJ,EAA4B;MAC1BD,OAAO,GAAGA,OAAO,CAACd,KAAR,CAAcD,IAAd,CAAV;IACD;IAED,OAAOe,OAAP;EACD;EA6BDE,UAAUA,CAMRxE,IANQ,EAORC,IAPQ,EAURyC,IAVQ,EAWQ;IAChB,MAAMhB,aAAa,GAAGC,cAAc,CAAC3B,IAAD,EAAOC,IAAP,EAAayC,IAAb,CAApC;IACA,MAAMd,gBAAgB,GAAG,IAAK,CAAAC,mBAAL,CAAyBH,aAAzB,CAAzB,CAFgB;;IAKhB,IAAI,OAAOE,gBAAgB,CAAC6C,KAAxB,KAAkC,WAAtC,EAAmD;MACjD7C,gBAAgB,CAAC6C,KAAjB,GAAyB,KAAzB;IACD;IAED,MAAMnD,KAAK,GAAG,KAAK/C,UAAL,CAAgBuD,KAAhB,CAAsB,IAAtB,EAA4BF,gBAA5B,CAAd;IAEA,OAAON,KAAK,CAACoD,aAAN,CAAoB9C,gBAAgB,CAAC+C,SAArC,IACHrD,KAAK,CAAC4C,KAAN,CAAYtC,gBAAZ,CADG,GAEHwB,OAAO,CAACU,OAAR,CAAgBxC,KAAK,CAACT,KAAN,CAAYC,IAA5B,CAFJ;EAGD;EA6BD8D,aAAaA,CAMX5E,IANW,EAOXC,IAPW,EAUXyC,IAVW,EAWI;IACf,OAAO,KAAK8B,UAAL,CAAgBxE,IAAhB,EAA6BC,IAA7B,EAA0CyC,IAA1C,CACJ,CAAAY,IADI,CACCC,IADD,EAEJC,KAFI,CAEED,IAFF,CAAP;EAGD;EA6BDsB,kBAAkBA,CAMhB7E,IANgB,EAShBC,IATgB,EAYhByC,IAZgB,EAac;IAC9B,MAAMhB,aAAa,GAAGC,cAAc,CAAC3B,IAAD,EAAOC,IAAP,EAAayC,IAAb,CAApC;IACAhB,aAAa,CAACoD,QAAd,GAAyBC,qBAAqB,EAA9C;IAKA,OAAO,IAAK,CAAAP,UAAL,CAAgB9C,aAAhB,CAAP;EACD;EA6BDsD,qBAAqBA,CAMnBhF,IANmB,EASnBC,IATmB,EAYnByC,IAZmB,EAaJ;IACf,OAAO,KAAKmC,kBAAL,CAAwB7E,IAAxB,EAAqCC,IAArC,EAAkDyC,IAAlD,CACJ,CAAAY,IADI,CACCC,IADD,EAEJC,KAFI,CAEED,IAFF,CAAP;EAGD;EAEDlE,qBAAqBA,CAAA,EAAkB;IACrC,OAAO,IAAK,CAAAZ,aAAL,CAAmBY,qBAAnB,EAAP;EACD;EAED4B,aAAaA,CAAA,EAAe;IAC1B,OAAO,KAAK1C,UAAZ;EACD;EAED0G,gBAAgBA,CAAA,EAAkB;IAChC,OAAO,KAAKxG,aAAZ;EACD;EAEDyG,SAASA,CAAA,EAAW;IAClB,OAAO,KAAKvG,MAAZ;EACD;EAEDwG,iBAAiBA,CAAA,EAAmB;IAClC,OAAO,KAAKtG,cAAZ;EACD;EAEDuG,iBAAiBA,CAAC/D,OAAD,EAAgC;IAC/C,IAAK,CAAAxC,cAAL,GAAsBwC,OAAtB;EACD;EAEDgE,gBAAgBA,CACd3E,QADc,EAEdW,OAFc,EAGR;IACN,MAAMiE,MAAM,GAAG,IAAK,CAAAxG,aAAL,CAAmB8B,IAAnB,CACZ2E,CAAD,IAAOC,YAAY,CAAC9E,QAAD,CAAZ,KAA2B8E,YAAY,CAACD,CAAC,CAAC7E,QAAH,CADjC,CAAf;IAGA,IAAI4E,MAAJ,EAAY;MACVA,MAAM,CAACzG,cAAP,GAAwBwC,OAAxB;IACD,CAFD,MAEO;MACL,IAAK,CAAAvC,aAAL,CAAmB2G,IAAnB,CAAwB;QAAE/E,QAAF;QAAY7B,cAAc,EAAEwC;OAApD;IACD;EACF;EAEDqE,gBAAgBA,CACdhF,QADc,EAE6C;IAC3D,IAAI,CAACA,QAAL,EAAe;MACb,OAAOe,SAAP;IACD,CAH0D;;IAM3D,MAAMkE,qBAAqB,GAAG,KAAK7G,aAAL,CAAmB8B,IAAnB,CAAyB2E,CAAD,IACpDK,eAAe,CAAClF,QAAD,EAAW6E,CAAC,CAAC7E,QAAb,CADa,CAA9B,CAN2D;;IAW3D,IAAImF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC;MACA,MAAMC,gBAAgB,GAAG,KAAKlH,aAAL,CAAmBiF,MAAnB,CAA2BwB,CAAD,IACjDK,eAAe,CAAClF,QAAD,EAAW6E,CAAC,CAAC7E,QAAb,CADQ,CAAzB,CAFyC;;MAMzC,IAAIsF,gBAAgB,CAAC1F,MAAjB,GAA0B,CAA9B,EAAiC;QAC/B,IAAK,CAAA3B,MAAL,CAAYsH,KAAZ,2DAC0DC,IAAI,CAACC,SAAL,CACtDzF,QADsD,CAD1D;MAKD;IACF;IAED,OAAOiF,qBAAP,oBAAOA,qBAAqB,CAAE9G,cAA9B;EACD;EAEDuH,mBAAmBA,CACjBC,WADiB,EAEjBhF,OAFiB,EAGX;IACN,MAAMiE,MAAM,GAAG,IAAK,CAAAvG,gBAAL,CAAsB6B,IAAtB,CACZ2E,CAAD,IAAOC,YAAY,CAACa,WAAD,CAAZ,KAA8Bb,YAAY,CAACD,CAAC,CAACc,WAAH,CADpC,CAAf;IAGA,IAAIf,MAAJ,EAAY;MACVA,MAAM,CAACzG,cAAP,GAAwBwC,OAAxB;IACD,CAFD,MAEO;MACL,IAAK,CAAAtC,gBAAL,CAAsB0G,IAAtB,CAA2B;QAAEY,WAAF;QAAexH,cAAc,EAAEwC;OAA1D;IACD;EACF;EAEDiF,mBAAmBA,CACjBD,WADiB,EAEwC;IACzD,IAAI,CAACA,WAAL,EAAkB;MAChB,OAAO5E,SAAP;IACD,CAHwD;;IAMzD,MAAMkE,qBAAqB,GAAG,KAAK5G,gBAAL,CAAsB6B,IAAtB,CAA4B2E,CAAD,IACvDK,eAAe,CAACS,WAAD,EAAcd,CAAC,CAACc,WAAhB,CADa,CAA9B,CANyD;;IAWzD,IAAIR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC;MACA,MAAMC,gBAAgB,GAAG,KAAKjH,gBAAL,CAAsBgF,MAAtB,CAA8BwB,CAAD,IACpDK,eAAe,CAACS,WAAD,EAAcd,CAAC,CAACc,WAAhB,CADQ,CAAzB,CAFyC;;MAMzC,IAAIL,gBAAgB,CAAC1F,MAAjB,GAA0B,CAA9B,EAAiC;QAC/B,IAAK,CAAA3B,MAAL,CAAYsH,KAAZ,8DAC6DC,IAAI,CAACC,SAAL,CACzDE,WADyD,CAD7D;MAKD;IACF;IAED,OAAOV,qBAAP,oBAAOA,qBAAqB,CAAE9G,cAA9B;EACD;EAEDgD,mBAAmBA,CAOjBR,OAPiB,EAsBjB;IACA,IAAIA,OAAJ,YAAIA,OAAO,CAAEkF,UAAb,EAAyB;MACvB,OAAOlF,OAAP;IAOD;IAED,MAAMO,gBAAgB,GAAG;MACvB,GAAG,IAAK,CAAA/C,cAAL,CAAoB2H,OADA;MAEvB,GAAG,KAAKd,gBAAL,CAAsBrE,OAAtB,oBAAsBA,OAAO,CAAEX,QAA/B,CAFoB;MAGvB,GAAGW,OAHoB;MAIvBkF,UAAU,EAAE;KAJd;IAOA,IAAI,CAAC3E,gBAAgB,CAAC6E,SAAlB,IAA+B7E,gBAAgB,CAAClB,QAApD,EAA8D;MAC5DkB,gBAAgB,CAAC6E,SAAjB,GAA6BC,qBAAqB,CAChD9E,gBAAgB,CAAClB,QAD+B,EAEhDkB,gBAFgD,CAAlD;IAID,CAvBD;;IA0BA,IAAI,OAAOA,gBAAgB,CAAC+E,kBAAxB,KAA+C,WAAnD,EAAgE;MAC9D/E,gBAAgB,CAAC+E,kBAAjB,GACE/E,gBAAgB,CAACgF,WAAjB,KAAiC,QADnC;IAED;IACD,IAAI,OAAOhF,gBAAgB,CAACiF,gBAAxB,KAA6C,WAAjD,EAA8D;MAC5DjF,gBAAgB,CAACiF,gBAAjB,GAAoC,CAAC,CAACjF,gBAAgB,CAACkF,QAAvD;IACD;IAED,OAAOlF,gBAAP;EAOD;EAEDmF,sBAAsBA,CACpB1F,OADoB,EAEjB;IACH,IAAIA,OAAJ,YAAIA,OAAO,CAAEkF,UAAb,EAAyB;MACvB,OAAOlF,OAAP;IACD;IACD,OAAO;MACL,GAAG,IAAK,CAAAxC,cAAL,CAAoBmI,SADlB;MAEL,GAAG,KAAKV,mBAAL,CAAyBjF,OAAzB,oBAAyBA,OAAO,CAAEgF,WAAlC,CAFE;MAGL,GAAGhF,OAHE;MAILkF,UAAU,EAAE;KAJd;EAMD;EAEDU,KAAKA,CAAA,EAAS;IACZ,IAAK,CAAA1I,UAAL,CAAgB0I,KAAhB;IACA,IAAK,CAAAxI,aAAL,CAAmBwI,KAAnB;EACD;AAjpBsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}