{"ast":null,"code":"import { shallowEqualObjects, noop, isServer, isValidTimeout, timeUntilStale, replaceData } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { canFetch, isCancelledError } from './retryer.mjs';\nclass QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n      this.updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n  destroy() {\n    this.listeners = [];\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this\n      });\n    }\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    return this.createResult(query, options);\n  }\n  getCurrentResult() {\n    return this.currentResult;\n  }\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({\n      ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  computeRefetchInterval() {\n    var _this$options$refetch;\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n  clearStaleTimeout() {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  }\n  clearRefetchInterval() {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  }\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n    if (options.keepPreviousData && !state.dataUpdateCount && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            placeholderData = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n            this.selectError = selectError;\n          }\n        }\n      }\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n    const isFetching = fetchStatus === 'fetching';\n    const isLoading = status === 'loading';\n    const isError = status === 'error';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const {\n        notifyOnChangeProps\n      } = this.options;\n      if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !this.trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n    this.notify({\n      ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n    if (query === this.currentQuery) {\n      return;\n    }\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n    this.updateResult(notifyOptions);\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n}\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\nexport { QueryObserver };","map":{"version":3,"names":["QueryObserver","Subscribable","constructor","client","options","trackedProps","Set","selectError","bindMethods","setOptions","remove","bind","refetch","onSubscribe","listeners","length","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","shallowEqualObjects","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","build","createResult","getCurrentResult","currentResult","trackResult","result","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","add","getCurrentQuery","refetchPage","fetch","meta","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","cancelRefetch","promise","throwOnError","catch","noop","isServer","isStale","isValidTimeout","time","timeUntilStale","dataUpdatedAt","timeout","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","data","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","undefined","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","error","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","keepPreviousData","dataUpdateCount","isSuccess","select","selectFn","selectResult","replaceData","process","env","NODE_ENV","getLogger","placeholderData","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","errorUpdateCount","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","cache","shouldNotifyListeners","notifyOnChangeProps","size","includedProps","useErrorBoundary","some","typedKey","changed","has","onQueryUpdate","action","onSuccess","manual","isCancelledError","onError","notifyManager","batch","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","call","onSettled","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","value","suspense","isStaleByTime"],"sources":["/Users/kellypauls/Desktop/capstone-project/node_modules/@tanstack/query-core/src/queryObserver.ts"],"sourcesContent":["import type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            placeholderData = replaceData(\n              prevResult?.data,\n              placeholderData,\n              options,\n            )\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}